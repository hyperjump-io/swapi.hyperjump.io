#!/bin/node

const fs = require("fs").promises;
const url = require("url");
const axios = require("axios");


const lists = [
  ["people/", (person) => ({
    ...person,
    homeworld: toHref(person.homeworld),
    films: person.films.map(toHref),
    species: person.species.map(toHref),
    vehicles: person.vehicles.map(toHref),
    starships: person.starships.map(toHref)
  })],
  ["planets/", (planet) => ({
    ...planet,
    residents: planet.residents.map(toHref),
    films: planet.films.map(toHref)
  })],
  ["films/", (film) => ({
    ...film,
    characters: film.characters.map(toHref),
    planets: film.planets.map(toHref),
    starships: film.starships.map(toHref),
    vehicles: film.vehicles.map(toHref),
    species: film.species.map(toHref)
  })],
  ["species/", (species) => ({
    ...species,
    homeworld: toHref(species.homeworld),
    people: species.people.map(toHref),
    films: species.films.map(toHref)
  })],
  ["vehicles/", (vehicle) => ({
    ...vehicle,
    pilots: vehicle.pilots.map(toHref),
    films: vehicle.films.map(toHref)
  })],
  ["starships/", (starship) => ({
    ...starship,
    pilots: starship.pilots.map(toHref),
    films: starship.films.map(toHref)
  })]
];

const swapi = axios.create({
  baseURL: "https://swapi.co/api/",
  headers: { "Accept": "application/json" }
});

const processList = async (path, build) => {
  const promises = [];
  let list = { next: path };
  while (list.next) {
    console.log(list.next);
    const response = await swapi(list.next);
    list = await response.data;
    promises.concat(list.results
      .map(build)
      .map(clean)
      .map((item) => {
        const filename = `${__dirname}${toHref(item.url).$href}.json`;
        delete item.url;

        return fs.writeFile(filename, JSON.stringify(item, null, 2));
      }));
  }

  return Promise.all(promises);
};

const toHref = (uri) => uri && { "$href": url.parse(uri).path.replace(/\/$/, "") };

const clean = (obj) => {
  const cleanObj = {};
  Object.entries(obj).forEach(([key, value]) => {
    if (value !== null) {
      cleanObj[key] = value;
    }
  });

  return cleanObj;
};

(async function () {
  await Promise.all(lists.map(([path, build]) => processList(path, build)));
}())
  .then(() => console.log("done"))
  .catch((error) => console.log(error));
